type: edu
custom_name: stage5
files:
- name: test/BlockchainTest.java
  visible: false
  text: |
    import org.hyperskill.hstest.stage.StageTest;
    import org.hyperskill.hstest.testcase.CheckResult;
    import org.hyperskill.hstest.testcase.TestCase;

    import java.util.ArrayList;
    import java.util.List;
    import java.util.stream.Collectors;


    class BlockParseException extends Exception {
        BlockParseException(String msg) {
            super(msg);
        }
    }


    class Block {

        int id;
        long timestamp;
        long magic;
        String hashprev;
        String hash;

        static Block parseBlock(String strBlock) throws BlockParseException {
            if (strBlock.length() == 0) {
                return null;
            }

            if (!(strBlock.contains("Block:")
                && strBlock.contains("Timestamp:"))) {

                return null;
            }

            Block block = new Block();

            List<String> lines = strBlock
                .lines()
                .map(String::strip)
                .filter(e -> e.length() > 0)
                .collect(Collectors.toList());

            if (lines.size() < 12) {
                throw new BlockParseException("Every block should " +
                    "contain at least 12 lines of data");
            }

            if (!lines.get(0).equals("Block:")) {
                throw new BlockParseException("First line of every block " +
                    "should be \"Block:\"");
            }

            if (!lines.get(1).startsWith("Created by")) {
                throw new BlockParseException("Second line of every block " +
                    "should start with \"Created by\"");
            }

            if (!lines.get(2).startsWith("Id:")) {
                throw new BlockParseException("Third line of every block " +
                    "should start with \"Id:\"");
            }

            String id = lines.get(2).split(":")[1]
                .strip().replace("-", "");
            boolean isNumeric = id.chars().allMatch(Character::isDigit);

            if (!isNumeric) {
                throw new BlockParseException("Id should be a number");
            }

            block.id = Integer.parseInt(id);



            if (!lines.get(3).startsWith("Timestamp:")) {
                throw new BlockParseException("4-th line of every block " +
                    "should start with \"Timestamp:\"");
            }

            String timestamp = lines.get(3).split(":")[1]
                .strip().replace("-", "");
            isNumeric = timestamp.chars().allMatch(Character::isDigit);

            if (!isNumeric) {
                throw new BlockParseException("Timestamp should be a number");
            }

            block.timestamp = Long.parseLong(timestamp);


            if (!lines.get(4).startsWith("Magic number:")) {
                throw new BlockParseException("5-th line of every block " +
                    "should start with \"Magic number:\"");
            }

            String magic = lines.get(4).split(":")[1]
                .strip().replace("-", "");
            isNumeric = magic.chars().allMatch(Character::isDigit);

            if (!isNumeric) {
                throw new BlockParseException("Magic number should be a number");
            }

            block.magic = Long.parseLong(magic);



            if (!lines.get(5).equals("Hash of the previous block:")) {
                throw new BlockParseException("6-th line of every block " +
                    "should be \"Hash of the previous block:\"");
            }

            if (!lines.get(7).equals("Hash of the block:")) {
                throw new BlockParseException("8-th line of every block " +
                    "should be \"Hash of the block:\"");
            }

            String prevhash = lines.get(6).strip();
            String hash = lines.get(8).strip();

            if (!(prevhash.length() == 64 || prevhash.equals("0"))
                || !(hash.length() == 64)) {

                throw new BlockParseException("Hash length should " +
                    "be equal to 64 except \"0\"");
            }

            block.hash = hash;
            block.hashprev = prevhash;

            if (!lines.get(9).startsWith("Block data:")) {
                throw new BlockParseException("10-th line of every block " +
                    "should start with \"Block data:\"");
            }

            return block;
        }


        static List<Block> parseBlocks(String output) throws BlockParseException {
            String[] strBlocks = output.split("\n\n");

            List<Block> blocks = new ArrayList<>();

            for (String strBlock : strBlocks) {
                Block block = parseBlock(strBlock.strip());
                if (block != null) {
                    blocks.add(block);
                }
            }

            return blocks;
        }
    }

    class Clue {
        String zeros;
        Clue(int n) {
            zeros = "0".repeat(n);
        }
    }


    public class BlockchainTest extends StageTest<Clue> {

        List<String> previousOutputs = new ArrayList<>();

        @Override
        public List<TestCase<Clue>> generate() {
            return List.of(
                new TestCase<>(),
                new TestCase<>()
            );
        }

        @Override
        public CheckResult check(String reply, Clue clue) {

            if (previousOutputs.contains(reply)) {
                return new CheckResult(false,
                    "You already printed this text in the previous tests");
            }

            previousOutputs.add(reply);

            List<Block> blocks;
            try {
                blocks = Block.parseBlocks(reply);
            } catch (BlockParseException ex) {
                return new CheckResult(false, ex.getMessage());
            } catch (Exception ex) {
                return CheckResult.wrong("");
            }

            if (blocks.size() != 5) {
                return new CheckResult(false,
                    "You should output 5 blocks, found " + blocks.size());
            }

            for (int i = 1; i < blocks.size(); i++) {
                Block curr = blocks.get(i - 1);
                Block next = blocks.get(i);

                if (curr.id + 1 != next.id) {
                    return new CheckResult(false,
                        "Id`s of blocks should increase by 1");
                }

                if (next.timestamp < curr.timestamp) {
                    return new CheckResult(false,
                        "Timestamp`s of blocks should increase");
                }

                if (!next.hashprev.equals(curr.hash)) {
                    return new CheckResult(false, "Two hashes aren't equal, " +
                        "but should");
                }
            }


            return CheckResult.correct();
        }
    }
  learner_created: false
- name: src/Main.java
  visible: true
  text: |
    import blockchain.BlockChainManager;
    import clients.MinerManager;

    import java.util.concurrent.ExecutorService;
    import java.util.concurrent.Executors;

    public class Main {

        public static void main(String[] args) throws InterruptedException {

            BlockChainManager blockChainManager = new BlockChainManager(0);
            submitClients(20, blockChainManager);
        }

        public static void submitClients(int minersQty, BlockChainManager blockChainManager) throws InterruptedException {
            MinerManager minerManager = new MinerManager();
            ExecutorService executorService = Executors.newFixedThreadPool(minersQty);
            executorService.invokeAll(minerManager.getMiners(minersQty, blockChainManager));
        }
    }
  learner_created: true
- name: src/blockchain/BlockChainManager.java
  visible: true
  text: |
    package blockchain;

    import clients.Miner;

    import java.util.ArrayList;
    import java.util.List;

    public class BlockChainManager {

        /**
         * Created by ipodovinnikov (podovinnii@ae.com) on 4/2/22.
         */

        private final List<Block> blockChain = new ArrayList<>();
        private int difficulty;
        private String hashTarget;
        private final List<String> messages = new ArrayList<>();


        public BlockChainManager(int initialDifficulty) {
            this.difficulty = initialDifficulty;
            Block genesisBlock = new Block();
            genesisBlock.setBlockChainManager(this);
            genesisBlock.mineBlock(initialDifficulty);
            blockChain.add(genesisBlock);
            genesisBlock.printBlockInfo(new Miner());
            System.out.println();
            hashTarget = new String(new char[initialDifficulty]).replace('\0', '0');
        }

        public synchronized Block getLastBlock() {
            return blockChain.get(blockChain.size() - 1);
        }

        public void setDifficulty(int difficulty) {
            this.difficulty = difficulty;
        }

        public int getDifficulty() {
            return difficulty;
        }

        public List<Block> getBlockChain() {
            return blockChain;
        }

        public synchronized boolean offerBlock(Block block, Miner miner) {
            blockChain.add(block);
            if (isBlockValid(block)) {
                block.printBlockInfo(miner);
                block.getBlockChainManager().tuneDifficulty(block);
                return true;
            } else {
                blockChain.remove(block);
            }
            return false;
        }

        public boolean isChainValid() {
            Block previousBlock;
            Block currentBlock;

            for (int i = 1; i < blockChain.size(); i++) {
                currentBlock = blockChain.get(i);
                previousBlock = blockChain.get(i - 1);

                if (!currentBlock.getHash().equals(currentBlock.calculateHash())) {
                    return false;
                }
                if (!previousBlock.getHash().equals(currentBlock.getPreviousBlockHash())) {
                    return false;
                }
                if (!currentBlock.getHash().substring(0, difficulty).equals(hashTarget)) {
                    return false;
                }
            }
            return true;
        }

        public boolean isBlockValid(Block block) {
            Block previousBlock = blockChain.get(blockChain.size() - 2);
            if (!block.getHash().equals(block.calculateHash())) {
                System.out.println("block hash is not ok");
                return false;
            }
            if (!previousBlock.getHash().equals(block.getPreviousBlockHash())) {
                System.out.println("previous hash is not ok");
                return false;
            }
            if (!block.getHash().substring(0, difficulty).equals(hashTarget)) {
                System.out.println("hash difficulty is not ok");
                return false;
            }
            return true;
        }

        public void tuneDifficulty(Block block) {
            if (block.getTimeOfMining() < 1) {
                difficulty++;
                hashTarget = new String(new char[difficulty]).replace('\0', '0');
                System.out.printf("N was increased to %d%n", difficulty);
                System.out.println();
            } else if (block.getTimeOfMining() > 5) {
                difficulty--;
                hashTarget = new String(new char[difficulty]).replace('\0', '0');
                System.out.printf("N was decreased to %d%n", difficulty);
                System.out.println();

            } else {
                System.out.printf("N stays the same%n");
                System.out.println();

            }
        }

        public synchronized void writeMessage(String message) {
            messages.add(message);
        }

        public List<String> addMessagesToBlock() {
            List<String> copyOfMessages = new ArrayList<>(messages);
            messages.clear();
            return copyOfMessages;
        }
    }
  learner_created: true
- name: src/utils/StringUtil.java
  visible: true
  text: |-
    package utils;

    import java.security.MessageDigest;

    public class StringUtil {
        /* Applies Sha256 to a string and returns a hash. */
        public static String applySha256(String input){
            try {
                MessageDigest digest = MessageDigest.getInstance("SHA-256");
                /* Applies sha256 to our input */
                byte[] hash = digest.digest(input.getBytes("UTF-8"));
                StringBuilder hexString = new StringBuilder();
                for (byte elem: hash) {
                    String hex = Integer.toHexString(0xff & elem);
                    if(hex.length() == 1) hexString.append('0');
                    hexString.append(hex);
                }
                return hexString.toString();
            }
            catch(Exception e) {
                throw new RuntimeException(e);
            }
        }
    }
  learner_created: true
- name: src/clients/MinerManager.java
  visible: true
  text: |
    package clients;

    import blockchain.BlockChainManager;

    import java.util.Queue;
    import java.util.concurrent.ArrayBlockingQueue;

    public class MinerManager {

        /**
         * Created by ipodovinnikov (podovinnii@ae.com) on 4/4/22.
         */

        private Queue<Miner> miners;

        public Queue<Miner> getMiners(int qty, BlockChainManager blockChainManager) {
            miners = new ArrayBlockingQueue<>(qty);
            for (int i = 0; i < qty; i++) {
                Miner miner = new Miner();
                miner.setBlockChainManager(blockChainManager);
                miners.add(miner);
            }
            return miners;
        }
    }
  learner_created: true
- name: src/clients/Miner.java
  visible: true
  text: |
    package clients;

    import blockchain.Block;
    import blockchain.BlockChainManager;

    import java.util.concurrent.Callable;

    public class Miner implements Callable<Boolean> {

        /**
         * Created by ipodovinnikov (podovinnii@ae.com) on 4/4/22.
         */

        private BlockChainManager blockChainManager;
        private static final Object object = new Object();
        private static int clientNumberCount = 1;
        private final int clientNumber;

        public Miner() {
            this.clientNumber = clientNumberCount++;
        }

        public int getMinerNumber() {
            return clientNumber;
        }

        public void setBlockChainManager(BlockChainManager blockChainManager) {
            this.blockChainManager = blockChainManager;
        }

        public boolean mineBlock() {

            synchronized (object) {
                sendMessage();
                Block block = new Block(blockChainManager.getLastBlock(), blockChainManager.addMessagesToBlock());
                block.setBlockChainManager(blockChainManager);
                block.mineBlock(blockChainManager.getDifficulty());
                return blockChainManager.offerBlock(block, this);
            }
        }

        public void sendMessage() {
            blockChainManager.writeMessage("Hello! I am chatter #" + clientNumber + "\nHow are you?");
        }

        @Override
        public Boolean call() throws Exception {
            return mineBlock();
        }
    }
  learner_created: true
- name: src/blockchain/Block.java
  visible: true
  text: |
    package blockchain;

    import clients.Miner;
    import utils.StringUtil;

    import java.time.Duration;
    import java.time.LocalTime;
    import java.util.ArrayList;
    import java.util.Date;
    import java.util.List;

    public class Block {

        /**
         * Created by ipodovinnikov (podovinnii@ae.com) on 4/2/22.
         */

        private String hash;
        private String previousBlockHash;
        private int magicNumber;
        private static int idCounter = 1;
        private final int id;
        private final long timeStamp = new Date().getTime();
        private long timeOfMining;
        private BlockChainManager blockChainManager;
        private List<String> messages = new ArrayList<>();

        public String getPreviousBlockHash() {
            return previousBlockHash;
        }

        public int getId() {
            return id;
        }

        public long getTimeStamp() {
            return timeStamp;
        }

        Block() {
            this.id = 0;
            this.previousBlockHash = "0";
            this.hash = calculateHash();
        }

        public Block(Block previousBlock, List<String> messages) {
            this.previousBlockHash = previousBlock.getHash();
            this.id = idCounter++;
            this.messages = messages;
            this.hash = calculateHash();
        }

        public String getHash() {
            return hash;
        }

        public String calculateHash() {
            return StringUtil.applySha256(
                    previousBlockHash
                            + timeStamp
                            + magicNumber
                            + messages
                            + id);
        }

        public Block mineBlock(int difficulty) {
            LocalTime blockMiningStartTime = LocalTime.now();
            String target = new String(new char[difficulty]).replace('\0', '0');
            while (!hash.substring(0, difficulty).equals(target)) {
                magicNumber++;
                hash = calculateHash();
            }
            LocalTime blockMiningEndTime = LocalTime.now();
            timeOfMining = Duration.between(blockMiningStartTime, blockMiningEndTime).getSeconds();
            return this;
        }

        public int getMagicNumber() {
            return magicNumber;
        }

        public long getTimeOfMining() {
            return timeOfMining;
        }

        public BlockChainManager getBlockChainManager() {
            return blockChainManager;
        }

        public void setBlockChainManager(BlockChainManager blockChainManager) {
            this.blockChainManager = blockChainManager;
        }

        public void printBlockInfo(Miner miner) {
            System.out.println("Block:\n" +
                    "Created by miner # " + miner.getMinerNumber() + "\n" +
                    "Id: " + getId() + "\n" +
                    "Timestamp: " + getTimeStamp() + "\n" +
                    "Magic number: " + getMagicNumber() + "\n" +
                    "Hash of the previous block: \n" + getPreviousBlockHash() + "\n" +
                    "Hash of the block: \n" + getHash() + "\n" +
                    "Block data:");
            printMessages();
            System.out.println("Block was generating for " + getTimeOfMining() + " seconds");
        }

        public void printMessages() {
            if (messages.isEmpty()) System.out.println("no messages");
            for (String message : messages) {
                System.out.println(message);
            }
        }
    }
  learner_created: true
- name: src/blockchain/Transaction.java
  visible: true
  text: |
    package blockchain;

    import java.nio.charset.StandardCharsets;
    import java.security.*;
    import java.util.Base64;
    import java.util.concurrent.atomic.AtomicInteger;

    public class Message {

        /**
         * Created by ipodovinnikov (podovinnii@ae.com) on 4/7/22.
         */

        private final String message;
        private final int id;
        private static final AtomicInteger counter = new AtomicInteger(0);
        private KeyPair keyPair;
        private String signatureString;

        public Message(String message) throws NoSuchAlgorithmException, SignatureException, InvalidKeyException {
            this.message = message;
            this.id = counter.getAndIncrement();
            this.keyPair = getKeys();
            this.signatureString = sign();
        }

        public KeyPair getKeys() throws NoSuchAlgorithmException {
            KeyPairGenerator keyPairGenerator = KeyPairGenerator.getInstance("RSA");
            keyPairGenerator.initialize(2048);
            return keyPairGenerator.genKeyPair();
        }

        public String sign() throws NoSuchAlgorithmException, InvalidKeyException, SignatureException {
            Signature privateSignature = Signature.getInstance("SHA256withRSA");
            privateSignature.initSign(getKeys().getPrivate());
            privateSignature.update(getMessage().getBytes(StandardCharsets.UTF_8));
            byte[] signature = privateSignature.sign();
            return Base64.getEncoder().encodeToString(signature);
        }

        public String getMessage() {
            return message;
        }

        public String getSignatureString() {
            return signatureString;
        }

        public static void main(String[] args) throws NoSuchAlgorithmException, SignatureException, InvalidKeyException {
            Message message = new Message("hello!");
            System.out.println(message.getMessage());
            System.out.println(message.getSignatureString());
        }
    }
  learner_created: true
- name: src/blockchain/TransactionType.java
  visible: true
  learner_created: true
feedback_link: https://hyperskill.org/projects/50/stages/275/implement#comment
status: Solved
feedback:
  message: Congratulations!
  time: Fri, 08 Apr 2022 07:08:21 UTC
record: 5
